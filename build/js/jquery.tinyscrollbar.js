!function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){"use strict";function o(o,n){function s(){return d.contentPosition>0}function h(){return d.contentPosition<=d.contentSize-d.viewportSize-5}function c(o,i){d.hasContentToSroll&&(t("body").addClass("noSelect"),k=i?f.offset()[P]:b?o.pageX:o.pageY,w&&(document.ontouchmove=function(t){(d.options.touchLock||s()&&h())&&t.preventDefault(),t.touches[0][e+"Touch"]=1,a(t.touches[0])},document.ontouchend=r),t(document).bind("mousemove",a),t(document).bind("mouseup",r),f.bind("mouseup",r),S.bind("mouseup",r),a(o))}function u(e){if(d.hasContentToSroll){var i=e||window.event,n=-(i.deltaY||i.detail||-1/3*i.wheelDelta)/40,c=1===i.deltaMode?d.options.wheelSpeed:1;d.contentPosition-=n*c*d.options.wheelSpeed,d.contentPosition=Math.min(d.contentSize-d.viewportSize,Math.max(0,d.contentPosition)),d.thumbPosition=d.contentPosition/d.trackRatio,o.trigger("move"),f.css(P,d.thumbPosition),l.css(P,-d.contentPosition),(d.options.wheelLock||s()&&h())&&(i=t.event.fix(i)).preventDefault()}e.stopPropagation()}function a(t){if(d.hasContentToSroll){var i=b?t.pageX:t.pageY,n=t[e+"Touch"]?k-i:i-k,s=Math.min(d.trackSize-d.thumbSize,Math.max(0,d.thumbPosition+n));d.contentPosition=s*d.trackRatio,o.trigger("move"),f.css(P,s),l.css(P,-d.contentPosition)}}function r(){d.thumbPosition=parseInt(f.css(P),10)||0,t("body").removeClass("noSelect"),t(document).unbind("mousemove",a),t(document).unbind("mouseup",r),f.unbind("mouseup",r),S.unbind("mouseup",r),document.ontouchmove=document.ontouchend=null}this.options=t.extend({},i,n),this._defaults=i,this._name=e;var d=this,m=o.find(".viewport"),l=o.find(".overview"),p=o.find(".scrollbar"),S=p.find(".track"),f=p.find(".thumb"),w="ontouchstart"in document.documentElement,z="onwheel"in document.createElement("div")?"wheel":void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll",b="x"===this.options.axis,v=b?"width":"height",P=b?"left":"top",k=0;return this.contentPosition=0,this.viewportSize=0,this.contentSize=0,this.contentRatio=0,this.trackSize=0,this.trackRatio=0,this.thumbSize=0,this.thumbPosition=0,this.hasContentToSroll=!1,this.update=function(t){var o=v.charAt(0).toUpperCase()+v.slice(1).toLowerCase();switch(this.viewportSize=m[0]["offset"+o],this.contentSize=l[0]["scroll"+o],this.contentRatio=this.viewportSize/this.contentSize,this.trackSize=this.options.trackSize||this.viewportSize,this.thumbSize=Math.min(this.trackSize,Math.max(this.options.thumbSizeMin,this.options.thumbSize||this.trackSize*this.contentRatio),1),this.trackRatio=(this.contentSize-this.viewportSize)/(this.trackSize-this.thumbSize),this.hasContentToSroll=this.contentRatio<1,p.toggleClass("disable",!this.hasContentToSroll),t){case"bottom":this.contentPosition=Math.max(this.contentSize-this.viewportSize,0);break;case"relative":this.contentPosition=Math.min(Math.max(this.contentSize-this.viewportSize,0),Math.max(0,this.contentPosition));break;default:this.contentPosition=parseInt(t,10)||0}return this.thumbPosition=this.contentPosition/this.trackRatio,f.css(P,d.thumbPosition),l.css(P,-d.contentPosition),p.css(v,d.trackSize),S.css(v,d.trackSize),f.css(v,d.thumbSize),d},d.update(),w&&(m[0].ontouchstart=function(t){1===t.touches.length&&(t.stopPropagation(),c(t.touches[0]))}),f.bind("mousedown",function(t){t.stopPropagation(),c(t)}),S.bind("mousedown",function(t){c(t,!0)}),t(window).resize(function(){d.update("relative")}),d.options.wheel&&window.addEventListener?o[0].addEventListener(z,u,!1):d.options.wheel&&(o[0].onmousewheel=u),d}var e="tinyscrollbar",i={axis:"y",wheel:!0,wheelSpeed:40,wheelLock:!0,touchLock:!0,trackSize:!1,thumbSize:!1,thumbSizeMin:20};t.fn[e]=function(i){return this.each(function(){t.data(this,"plugin_"+e)||t.data(this,"plugin_"+e,new o(t(this),i))})}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
